-- MySQL Script generated by MySQL Workbench
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema pecs_lms
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema pecs_lms
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `pecs_lms` DEFAULT CHARACTER SET utf8mb4 ;
USE `pecs_lms` ;

-- -----------------------------------------------------
-- Table `pecs_lms`.`CategoriaUsuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`CategoriaUsuario` (
  `idCategoriaUsuario` INT UNSIGNED NOT NULL COMMENT 'id de categoria del usuario',
  `descripcion` VARCHAR(45) NOT NULL COMMENT 'Categorias de usuario (Administrador, Docente, Estudiante)',
  PRIMARY KEY (`idCategoriaUsuario`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`Usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`Usuario` (
  `idUsuario` BIGINT UNSIGNED NOT NULL COMMENT 'id del usuario',
  `nombre` VARCHAR(45) NOT NULL COMMENT 'nombre del usuario',
  `apellido` VARCHAR(45) NOT NULL COMMENT 'apellido del usuario',
  `nombreUsuario` VARCHAR(30) NOT NULL COMMENT 'nombre de usuario que tendra cada usuario',
  `clave` VARCHAR(90) NOT NULL COMMENT 'contrase√±a',
  `urlImagenPerfil` VARCHAR(3000) NULL COMMENT 'imagen de perfil',
  `descripcionPerfil` TEXT NULL COMMENT 'descripcion del perfil',
  `pais` VARCHAR(100) NULL,
  `zonaHoraria` VARCHAR(100) NULL,
  `idioma` VARCHAR(100) NULL,
  `fechaRegistro` DATETIME NULL COMMENT 'Fecha de registro de usuario a la plataforma',
  `ultimaSesion` DATETIME NULL COMMENT 'Guardar ultima sesion de usuario',
  `codigoConfirmacion` VARCHAR(90) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL COMMENT 'Codigo para confirmacion de registro',
  `estado` TINYINT NULL COMMENT 'Estado de cuenta de usuario (Activo/Inactivo)',
  `idCategoriaUsuario` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`idUsuario`),
  INDEX `fk_Usuario_TipoUsuario1_idx` (`idCategoriaUsuario` ASC),
  CONSTRAINT `fk_Usuario_TipoUsuario1`
    FOREIGN KEY (`idCategoriaUsuario`)
    REFERENCES `pecs_lms`.`CategoriaUsuario` (`idCategoriaUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`Correo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`Correo` (
  `idCorreo` BIGINT UNSIGNED NOT NULL COMMENT 'id del correo',
  `descripcion` VARCHAR(200) NOT NULL COMMENT 'descripcion del correo',
  `correoSesion` TINYINT NOT NULL COMMENT 'Validar si es correo con el que se inicia sesion',
  `idUsuario` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idCorreo`),
  INDEX `fk_Correo_Usuario1_idx` (`idUsuario` ASC),
  CONSTRAINT `fk_Correo_Usuario1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `pecs_lms`.`Usuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`Telefono`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`Telefono` (
  `idTelefono` BIGINT UNSIGNED NOT NULL,
  `numeroTelefono` VARCHAR(45) NOT NULL COMMENT 'numero de telefono',
  `idUsuario` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idTelefono`),
  INDEX `fk_Telefono_Usuario1_idx` (`idUsuario` ASC),
  CONSTRAINT `fk_Telefono_Usuario1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `pecs_lms`.`Usuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`CategoriaPrograma`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`CategoriaPrograma` (
  `idCategoriaPrograma` INT UNSIGNED NOT NULL,
  `codigoTipoPrograma` VARCHAR(20) NULL,
  `descripcion` VARCHAR(90) NOT NULL COMMENT 'Categorias de programas (Diplomados, Cursos, Talleres)',
  `fechaCreacion` DATETIME NULL COMMENT 'fecha de creacion del programa',
  `estado` TINYINT NOT NULL COMMENT 'Disponibilidad de la categoria',
  PRIMARY KEY (`idCategoriaPrograma`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`SeccionPrograma`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`SeccionPrograma` (
  `idSeccionPrograma` BIGINT UNSIGNED NOT NULL,
  `codigoSeccion` VARCHAR(20) NULL,
  `modalidad` VARCHAR(45) NULL COMMENT 'Presencial o Virtual',
  `nombre` VARCHAR(100) NOT NULL,
  `descripcion` LONGTEXT NULL,
  `zonaHoraria` VARCHAR(100) NULL,
  `fechaInicio` DATETIME NULL,
  `fechaFin` DATETIME NULL,
  `dias` VARCHAR(45) NULL COMMENT 'LuMaMiJuViSaDo',
  `horario` VARCHAR(45) NULL COMMENT 'Hora de impartir la seccion',
  `codigoInscripcion` VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL COMMENT 'Codigo para inscribirse a la seccion',
  `fechaCreacion` DATETIME NULL,
  `directorio` VARCHAR(3000) NULL COMMENT 'Ruta de carpeta en disco duro',
  `estado` TINYINT NOT NULL COMMENT 'Disponibilidad de la seccion',
  `idCategoriaPrograma` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`idSeccionPrograma`),
  INDEX `fk_SeccionPrograma_CategoriaPrograma1_idx` (`idCategoriaPrograma` ASC),
  CONSTRAINT `fk_SeccionPrograma_CategoriaPrograma1`
    FOREIGN KEY (`idCategoriaPrograma`)
    REFERENCES `pecs_lms`.`CategoriaPrograma` (`idCategoriaPrograma`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`GrupoTrabajo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`GrupoTrabajo` (
  `idGrupoTrabajo` BIGINT UNSIGNED NOT NULL COMMENT 'id del grupo de trabajo',
  `descripcion` VARCHAR(45) NOT NULL COMMENT 'descripcion del grupo de trabajo.',
  `idSeccionPrograma` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idGrupoTrabajo`),
  INDEX `fk_GrupoTrabajo_SeccionPrograma1_idx` (`idSeccionPrograma` ASC),
  CONSTRAINT `fk_GrupoTrabajo_SeccionPrograma1`
    FOREIGN KEY (`idSeccionPrograma`)
    REFERENCES `pecs_lms`.`SeccionPrograma` (`idSeccionPrograma`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`Inscripcion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`Inscripcion` (
  `idInscripcion` BIGINT UNSIGNED NOT NULL,
  `fechaInscripcion` DATE NULL COMMENT 'fecha en la que se inscribio al programa',
  `nota` FLOAT NULL,
  `rolUsuario` VARCHAR(45) NOT NULL COMMENT 'Instructor/ Estudiante',
  `idUsuario` BIGINT UNSIGNED NOT NULL,
  `idSeccionPrograma` BIGINT UNSIGNED NOT NULL,
  `idGrupoTrabajo` BIGINT UNSIGNED NULL,
  PRIMARY KEY (`idInscripcion`),
  INDEX `fk_Inscripcion_Usuario1_idx` (`idUsuario` ASC),
  INDEX `fk_Inscripcion_SeccionPrograma1_idx` (`idSeccionPrograma` ASC),
  INDEX `fk_Inscripcion_GrupoTrabajo1_idx` (`idGrupoTrabajo` ASC),
  CONSTRAINT `fk_Inscripcion_Usuario1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `pecs_lms`.`Usuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Inscripcion_SeccionPrograma1`
    FOREIGN KEY (`idSeccionPrograma`)
    REFERENCES `pecs_lms`.`SeccionPrograma` (`idSeccionPrograma`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Inscripcion_GrupoTrabajo1`
    FOREIGN KEY (`idGrupoTrabajo`)
    REFERENCES `pecs_lms`.`GrupoTrabajo` (`idGrupoTrabajo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`Modulo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`Modulo` (
  `idModulo` BIGINT UNSIGNED NOT NULL COMMENT 'id del modulo',
  `nombre` VARCHAR(100) NOT NULL COMMENT 'nombre del modulo',
  `principal` TINYINT NULL COMMENT 'Modulo Principal de la Seccion',
  `bloqueo` DATETIME NULL COMMENT 'Modulo bloqueado hasta fecha mencionada (Bloqueado es visible pero no tiene funcionalidad sus items)',
  `estado` TINYINT NOT NULL COMMENT 'Disponibilidad del modulo',
  `posicion` INT NULL COMMENT 'Orden del modulo',
  `idSeccionPrograma` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idModulo`),
  INDEX `fk_Modulo_SeccionPrograma1_idx` (`idSeccionPrograma` ASC),
  CONSTRAINT `fk_Modulo_SeccionPrograma1`
    FOREIGN KEY (`idSeccionPrograma`)
    REFERENCES `pecs_lms`.`SeccionPrograma` (`idSeccionPrograma`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`Pagina`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`Pagina` (
  `idPagina` BIGINT UNSIGNED NOT NULL COMMENT 'id de la pagina',
  `nombre` VARCHAR(100) NOT NULL COMMENT 'nombre de la pagina',
  `contenido` LONGTEXT NULL COMMENT 'contenido que tendra la pagina: archivos, imagenes, videos, etc.',
  `visibilidad` TINYINT NULL COMMENT 'Visibilidad en el apartado de modulo',
  `paginaInicio` TINYINT NULL COMMENT 'Establecer como pagina de inicio',
  `estado` TINYINT NOT NULL,
  `posicionModulo` INT NULL,
  `posicionSeccionPaginas` INT NULL,
  `idModulo` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idPagina`),
  INDEX `fk_Pagina_Modulo1_idx` (`idModulo` ASC),
  CONSTRAINT `fk_Pagina_Modulo1`
    FOREIGN KEY (`idModulo`)
    REFERENCES `pecs_lms`.`Modulo` (`idModulo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`TextoEncabezado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`TextoEncabezado` (
  `idTextoEncabezado` BIGINT UNSIGNED NOT NULL COMMENT 'id del texto de encabezado',
  `contenido` TEXT NOT NULL COMMENT 'contenido del texto de encabezado',
  `estado` TINYINT NOT NULL COMMENT 'Disponibilidad del texto',
  `posicionModulo` INT NULL COMMENT 'Posicion de item en el Modulo',
  `idModulo` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idTextoEncabezado`),
  INDEX `fk_TextoEncabezado_Modulo1_idx` (`idModulo` ASC),
  CONSTRAINT `fk_TextoEncabezado_Modulo1`
    FOREIGN KEY (`idModulo`)
    REFERENCES `pecs_lms`.`Modulo` (`idModulo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`urlExterna`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`urlExterna` (
  `idurlExterna` BIGINT UNSIGNED NOT NULL,
  `nombre` VARCHAR(100) NOT NULL,
  `url` VARCHAR(3000) NOT NULL,
  `pestaniaNueva` TINYINT NULL COMMENT 'Abrir en pestania nueva',
  `estado` TINYINT NOT NULL,
  `posicionModulo` INT NULL,
  `idModulo` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idurlExterna`),
  INDEX `fk_urlExterna_Modulo1_idx` (`idModulo` ASC),
  CONSTRAINT `fk_urlExterna_Modulo1`
    FOREIGN KEY (`idModulo`)
    REFERENCES `pecs_lms`.`Modulo` (`idModulo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`Diploma`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`Diploma` (
  `idDiploma` BIGINT UNSIGNED NOT NULL,
  `programaDiploma` VARCHAR(100) NULL COMMENT 'Nombre del programa del que recibio el diploma',
  `urlDiploma` VARCHAR(3000) NULL COMMENT 'enlace del diploma',
  `idUsuario` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idDiploma`),
  INDEX `fk_Diploma_Usuario1_idx` (`idUsuario` ASC),
  CONSTRAINT `fk_Diploma_Usuario1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `pecs_lms`.`Usuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`ItemArchivo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`ItemArchivo` (
  `idItemArchivo` BIGINT UNSIGNED NOT NULL,
  `nombre` VARCHAR(100) NOT NULL,
  `tipoItem` VARCHAR(45) NULL COMMENT 'Carga de un archivo o multiples archivos',
  `bloqueo` DATETIME NULL COMMENT 'Item bloqueado hasta fecha mencionada (Item visible pero su descripcion esta bloqueada)',
  `estado` TINYINT NOT NULL COMMENT 'Disponibilidad del Item',
  `posicionModulo` INT NULL COMMENT 'Posicion de item en el Modulo',
  `idModulo` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idItemArchivo`),
  INDEX `fk_ItemArchivo_Modulo1_idx` (`idModulo` ASC),
  CONSTRAINT `fk_ItemArchivo_Modulo1`
    FOREIGN KEY (`idModulo`)
    REFERENCES `pecs_lms`.`Modulo` (`idModulo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`Archivo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`Archivo` (
  `idArchivo` BIGINT UNSIGNED NOT NULL,
  `nombreArchivo` VARCHAR(255) NULL COMMENT 'nombre del archivo',
  `urlArchivo` VARCHAR(3000) NULL COMMENT 'enlace del archivo',
  `tamanio` VARCHAR(45) NULL COMMENT 'tama√±o del archivo',
  `idItemArchivo` BIGINT UNSIGNED NULL,
  `idSeccionPrograma` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idArchivo`),
  INDEX `fk_Archivo_ItemArchivo1_idx` (`idItemArchivo` ASC),
  INDEX `fk_Archivo_SeccionPrograma1_idx` (`idSeccionPrograma` ASC),
  CONSTRAINT `fk_Archivo_ItemArchivo1`
    FOREIGN KEY (`idItemArchivo`)
    REFERENCES `pecs_lms`.`ItemArchivo` (`idItemArchivo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Archivo_SeccionPrograma1`
    FOREIGN KEY (`idSeccionPrograma`)
    REFERENCES `pecs_lms`.`SeccionPrograma` (`idSeccionPrograma`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`Tarea`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`Tarea` (
  `idTarea` BIGINT UNSIGNED NOT NULL COMMENT 'id de la tarea',
  `nombre` VARCHAR(100) NOT NULL COMMENT 'nombre de la tarea',
  `descripcion` LONGTEXT NULL COMMENT 'descripcion de la tarea',
  `calificado` TINYINT NULL COMMENT 'sera calificada o no.',
  `puntaje` FLOAT NULL COMMENT 'puntaje que tendra la tarea',
  `fechaDisponibleInicial` DATETIME NULL COMMENT 'fecha de inicio que estara disponible',
  `fechaDisponibleFinal` DATETIME NULL COMMENT 'fecha final que estara disponible',
  `fechaEntrega` DATETIME NULL COMMENT 'fecha maxima de entrega',
  `grupal` TINYINT NULL COMMENT 'si es grupal o no',
  `posicionModulo` INT NULL,
  `posicionSeccionTareas` INT NULL,
  `estado` TINYINT NOT NULL COMMENT 'entregada/ no entregada',
  `todos` TINYINT NULL,
  `idModulo` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idTarea`),
  INDEX `fk_Tarea_Modulo1_idx` (`idModulo` ASC),
  CONSTRAINT `fk_Tarea_Modulo1`
    FOREIGN KEY (`idModulo`)
    REFERENCES `pecs_lms`.`Modulo` (`idModulo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`EntregaTarea`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`EntregaTarea` (
  `idEntregaTarea` BIGINT UNSIGNED NOT NULL,
  `urlEntrega` VARCHAR(3000) NULL,
  `fechaEntrega` DATETIME NULL,
  `fechaUltimaModificacion` DATETIME NULL,
  `estadoEntrega` VARCHAR(45) NULL,
  `comentario` VARCHAR(5000) NULL,
  `idInscripcionEstudiante` BIGINT UNSIGNED NOT NULL,
  `idTarea` BIGINT UNSIGNED NOT NULL,
  `idGrupoTrabajo` BIGINT UNSIGNED NULL,
  PRIMARY KEY (`idEntregaTarea`),
  INDEX `fk_EntregaTarea_Tarea1_idx` (`idTarea` ASC),
  INDEX `fk_EntregaTarea_Inscripcion1_idx` (`idInscripcionEstudiante` ASC),
  INDEX `fk_EntregaTarea_GrupoTrabajo1_idx` (`idGrupoTrabajo` ASC),
  CONSTRAINT `fk_EntregaTarea_Tarea1`
    FOREIGN KEY (`idTarea`)
    REFERENCES `pecs_lms`.`Tarea` (`idTarea`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_EntregaTarea_Inscripcion1`
    FOREIGN KEY (`idInscripcionEstudiante`)
    REFERENCES `pecs_lms`.`Inscripcion` (`idInscripcion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_EntregaTarea_GrupoTrabajo1`
    FOREIGN KEY (`idGrupoTrabajo`)
    REFERENCES `pecs_lms`.`GrupoTrabajo` (`idGrupoTrabajo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`AsignacionTarea`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`AsignacionTarea` (
  `idTarea` BIGINT UNSIGNED NOT NULL,
  `idInscripcionEstudiante` BIGINT UNSIGNED NOT NULL,
  `fechaDisponibleInicial` DATETIME NULL,
  `fechaDisponibleFinal` DATETIME NULL COMMENT 'fecha entre la cual estara disponible ',
  `fechaEntrega` DATETIME NULL COMMENT 'fecha maxima de entrega',
  PRIMARY KEY (`idTarea`, `idInscripcionEstudiante`),
  INDEX `fk_Tarea_has_Inscripcion_Inscripcion1_idx` (`idInscripcionEstudiante` ASC),
  INDEX `fk_Tarea_has_Inscripcion_Tarea1_idx` (`idTarea` ASC),
  CONSTRAINT `fk_Tarea_has_Inscripcion_Tarea1`
    FOREIGN KEY (`idTarea`)
    REFERENCES `pecs_lms`.`Tarea` (`idTarea`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Tarea_has_Inscripcion_Inscripcion1`
    FOREIGN KEY (`idInscripcionEstudiante`)
    REFERENCES `pecs_lms`.`Inscripcion` (`idInscripcion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`AsignacionTareaGrupal`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`AsignacionTareaGrupal` (
  `idTarea` BIGINT UNSIGNED NOT NULL,
  `idGrupoTrabajo` BIGINT UNSIGNED NOT NULL,
  `fechaDisponibleInicial` DATETIME NULL,
  `fechaDisponibleFinal` DATETIME NULL COMMENT 'fecha en la cual estara disponible',
  `fechaEntrega` DATETIME NULL COMMENT 'fecha maxima de entrega',
  PRIMARY KEY (`idTarea`, `idGrupoTrabajo`),
  INDEX `fk_GrupoTrabajo_has_Tarea_Tarea1_idx` (`idTarea` ASC),
  INDEX `fk_GrupoTrabajo_has_Tarea_GrupoTrabajo1_idx` (`idGrupoTrabajo` ASC),
  CONSTRAINT `fk_GrupoTrabajo_has_Tarea_GrupoTrabajo1`
    FOREIGN KEY (`idGrupoTrabajo`)
    REFERENCES `pecs_lms`.`GrupoTrabajo` (`idGrupoTrabajo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_GrupoTrabajo_has_Tarea_Tarea1`
    FOREIGN KEY (`idTarea`)
    REFERENCES `pecs_lms`.`Tarea` (`idTarea`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`Foro`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`Foro` (
  `idForo` BIGINT UNSIGNED NOT NULL COMMENT 'id del foro',
  `nombre` VARCHAR(100) NOT NULL COMMENT 'nombre del foro',
  `descripcion` LONGTEXT NULL COMMENT 'descripcion del foro',
  `calificado` TINYINT NULL COMMENT 'si ya fue calificado o no ',
  `puntaje` FLOAT NULL COMMENT 'puntaje que tendra el foro',
  `fechaDisponibleInicial` DATETIME NULL COMMENT 'fecha en que visualizara el foro',
  `fechaDisponibleFinal` DATETIME NULL COMMENT 'fecha hasta la que se podra ver el foro',
  `fechaEntrega` DATETIME NULL COMMENT 'fecha maxima que se podra entregar el foro ',
  `grupal` TINYINT NULL COMMENT 'si el foro es grupal o no',
  `posicionModulo` INT NULL,
  `posicionSeccionForos` INT NULL,
  `estado` TINYINT NOT NULL COMMENT 'entregado/no entregado',
  `todos` TINYINT NULL,
  `idModulo` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idForo`),
  INDEX `fk_Foro_Modulo1_idx` (`idModulo` ASC),
  CONSTRAINT `fk_Foro_Modulo1`
    FOREIGN KEY (`idModulo`)
    REFERENCES `pecs_lms`.`Modulo` (`idModulo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`AsignacionForo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`AsignacionForo` (
  `idForo` BIGINT UNSIGNED NOT NULL,
  `idInscripcionEstudiante` BIGINT UNSIGNED NOT NULL,
  `fechaDisponibleInicial` DATETIME NULL,
  `fechaDisponibleFinal` DATETIME NULL COMMENT 'fecha entre la cual estara disponible ',
  `fechaEntrega` DATETIME NULL COMMENT 'fecha maxima de entrega ',
  PRIMARY KEY (`idForo`, `idInscripcionEstudiante`),
  INDEX `fk_Foro_has_Inscripcion_Inscripcion1_idx` (`idInscripcionEstudiante` ASC),
  INDEX `fk_Foro_has_Inscripcion_Foro1_idx` (`idForo` ASC),
  CONSTRAINT `fk_Foro_has_Inscripcion_Foro1`
    FOREIGN KEY (`idForo`)
    REFERENCES `pecs_lms`.`Foro` (`idForo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Foro_has_Inscripcion_Inscripcion1`
    FOREIGN KEY (`idInscripcionEstudiante`)
    REFERENCES `pecs_lms`.`Inscripcion` (`idInscripcion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`AsignacionForoGrupal`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`AsignacionForoGrupal` (
  `idForo` BIGINT UNSIGNED NOT NULL,
  `idGrupoTrabajo` BIGINT UNSIGNED NOT NULL,
  `fechaDisponibleInicial` DATETIME NULL,
  `fechaDisponibleFinal` DATETIME NULL COMMENT 'fecha entre la cual estara disponible ',
  `fechaEntrega` DATETIME NULL COMMENT 'fecha maxima de entrega',
  PRIMARY KEY (`idForo`, `idGrupoTrabajo`),
  INDEX `fk_Foro_has_GrupoTrabajo_GrupoTrabajo1_idx` (`idGrupoTrabajo` ASC),
  INDEX `fk_Foro_has_GrupoTrabajo_Foro1_idx` (`idForo` ASC),
  CONSTRAINT `fk_Foro_has_GrupoTrabajo_Foro1`
    FOREIGN KEY (`idForo`)
    REFERENCES `pecs_lms`.`Foro` (`idForo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Foro_has_GrupoTrabajo_GrupoTrabajo1`
    FOREIGN KEY (`idGrupoTrabajo`)
    REFERENCES `pecs_lms`.`GrupoTrabajo` (`idGrupoTrabajo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`TemaDiscusion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`TemaDiscusion` (
  `idTemaDiscusion` BIGINT UNSIGNED NOT NULL,
  `nombre` VARCHAR(200) NOT NULL COMMENT 'nombre del tema de discucion ',
  `idForo` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idTemaDiscusion`),
  INDEX `fk_TemaDiscusion_Foro1_idx` (`idForo` ASC),
  CONSTRAINT `fk_TemaDiscusion_Foro1`
    FOREIGN KEY (`idForo`)
    REFERENCES `pecs_lms`.`Foro` (`idForo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`EntradaForo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`EntradaForo` (
  `idEntradaForo` BIGINT UNSIGNED NOT NULL,
  `comentario` LONGTEXT NOT NULL,
  `fechaPublicacion` DATETIME NULL,
  `fechaUltimaModificacion` DATETIME NULL,
  `idInscripcion` BIGINT UNSIGNED NOT NULL,
  `idTemaDiscusion` BIGINT UNSIGNED NOT NULL,
  `idGrupoTrabajo` BIGINT UNSIGNED NULL,
  PRIMARY KEY (`idEntradaForo`),
  INDEX `fk_RespuestaForo_Inscripcion1_idx` (`idInscripcion` ASC),
  INDEX `fk_RespuestaForo_GrupoTrabajo1_idx` (`idGrupoTrabajo` ASC),
  INDEX `fk_EntradaForo_TemaDiscusion1_idx` (`idTemaDiscusion` ASC),
  CONSTRAINT `fk_RespuestaForo_Inscripcion1`
    FOREIGN KEY (`idInscripcion`)
    REFERENCES `pecs_lms`.`Inscripcion` (`idInscripcion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_RespuestaForo_GrupoTrabajo1`
    FOREIGN KEY (`idGrupoTrabajo`)
    REFERENCES `pecs_lms`.`GrupoTrabajo` (`idGrupoTrabajo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_EntradaForo_TemaDiscusion1`
    FOREIGN KEY (`idTemaDiscusion`)
    REFERENCES `pecs_lms`.`TemaDiscusion` (`idTemaDiscusion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`RespuestaEntradaForo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`RespuestaEntradaForo` (
  `idRespuestaEntradaForo` BIGINT UNSIGNED NOT NULL COMMENT 'id de la respuesta da la entrada al foro',
  `comentario` TEXT NOT NULL COMMENT 'comentario de la entrada al modulo',
  `fechaPublicacion` DATETIME NULL COMMENT 'fecha que se publico la entrada al modulo',
  `fechaUltimaModificacion` DATETIME NULL COMMENT 'fecha en la que se modifico la entrada al modulo',
  `idInscripcion` BIGINT UNSIGNED NOT NULL,
  `idEntradaForo` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idRespuestaEntradaForo`),
  INDEX `fk_RespuestaEntrada_EntradaForo1_idx` (`idEntradaForo` ASC),
  INDEX `fk_RespuestaEntrada_Inscripcion1_idx` (`idInscripcion` ASC),
  CONSTRAINT `fk_RespuestaEntrada_EntradaForo1`
    FOREIGN KEY (`idEntradaForo`)
    REFERENCES `pecs_lms`.`EntradaForo` (`idEntradaForo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_RespuestaEntrada_Inscripcion1`
    FOREIGN KEY (`idInscripcion`)
    REFERENCES `pecs_lms`.`Inscripcion` (`idInscripcion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`Evaluacion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`Evaluacion` (
  `idEvaluacion` BIGINT UNSIGNED NOT NULL,
  `nombre` VARCHAR(100) NOT NULL COMMENT 'nombre de la evaluacion ',
  `descripcion` LONGTEXT NULL COMMENT 'descripcion de la evaluacion',
  `calificado` TINYINT NULL COMMENT 'Si la evaluacion tiene puntaje o no',
  `puntaje` FLOAT NULL COMMENT 'puntaje de la evaluacion',
  `preguntasRandom` TINYINT NULL COMMENT 'Mezclar aleatoriamente las preguntas',
  `respuestasRandom` TINYINT NULL COMMENT 'Mezclar aleatoriamente las respuestas',
  `multiplesIntentos` TINYINT NULL COMMENT 'Habilitar multiples intentos',
  `numeroMaxIntentos` INT NULL COMMENT 'Especificar la cantidad maxima de intentos en caso de haber multiples intentos',
  `tipoCalificacionMultiple` VARCHAR(45) NULL COMMENT 'Para los multiples intentos, seleccionar el modo de calificacion (mas alta, mas reciente, promedio)',
  `feedback` TINYINT NULL COMMENT 'Habilitar retroalimentacion de preguntas',
  `limiteTiempo` TINYINT NULL COMMENT 'Evaluacion con limite de tiempo o no',
  `duracion` INT NULL COMMENT 'En caso de haber limite de tiempo, especificar en minutos',
  `bloqueo` DATETIME NULL COMMENT 'Especificar la fecha y hora en la que se habilitara la evaluacion',
  `mostrarUnaPreguntaALaVez` TINYINT NULL COMMENT 'Mostrar una pregunta a la vez a la hora de realizar la evaluacion',
  `bloquearPreguntaRespondida` TINYINT NULL COMMENT 'Bloquear una pregunta una vez guardada su respuesta',
  `mostrarRespuestas` TINYINT NULL COMMENT 'Permitir que los estudiantes puedan ver las respuestas o no',
  `mostrarRespuestasFecha` DATETIME NULL COMMENT 'Fecha y hora inicial para mostrar las respuestas',
  `ocultarRespuestasFecha` DATETIME NULL COMMENT 'Fecha y hora final para ocultar las respuestas',
  `fechaDisponibleInicial` DATETIME NULL COMMENT 'Fecha inicial que estara disponible la evaluacion, antes de esta fecha y hora estara bloqueada su funcionalidad',
  `fechaDisponibleFinal` DATETIME NULL,
  `fechaEntrega` DATETIME NULL,
  `estado` TINYINT NOT NULL COMMENT 'Disponibilidad de la evaluacion',
  `todos` TINYINT NULL,
  `posicionModulo` INT NULL COMMENT 'Posicion del item en el modulo',
  `posicionSeccionEvaluaciones` INT NULL COMMENT 'Posicion del item en la seccion de evaluaciones',
  `idModulo` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idEvaluacion`),
  INDEX `fk_Evaluacion_Modulo1_idx` (`idModulo` ASC),
  CONSTRAINT `fk_Evaluacion_Modulo1`
    FOREIGN KEY (`idModulo`)
    REFERENCES `pecs_lms`.`Modulo` (`idModulo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`AsignacionEvaluacion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`AsignacionEvaluacion` (
  `idEvaluacion` BIGINT UNSIGNED NOT NULL,
  `idInscripcionEstudiante` BIGINT UNSIGNED NOT NULL,
  `fechaDisponibleInicial` DATETIME NULL,
  `fechaDisponibleFinal` DATETIME NULL COMMENT 'fecha entre la cual estara disponible.',
  `fechaEntrega` DATETIME NULL COMMENT 'fecha maxima de entrega',
  PRIMARY KEY (`idEvaluacion`, `idInscripcionEstudiante`),
  INDEX `fk_Evaluacion_has_Inscripcion_Inscripcion1_idx` (`idInscripcionEstudiante` ASC),
  INDEX `fk_Evaluacion_has_Inscripcion_Evaluacion1_idx` (`idEvaluacion` ASC),
  CONSTRAINT `fk_Evaluacion_has_Inscripcion_Evaluacion1`
    FOREIGN KEY (`idEvaluacion`)
    REFERENCES `pecs_lms`.`Evaluacion` (`idEvaluacion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Evaluacion_has_Inscripcion_Inscripcion1`
    FOREIGN KEY (`idInscripcionEstudiante`)
    REFERENCES `pecs_lms`.`Inscripcion` (`idInscripcion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`CategoriaPregunta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`CategoriaPregunta` (
  `idCategoriaPregunta` INT UNSIGNED NOT NULL,
  `descripcion` VARCHAR(200) NOT NULL COMMENT 'descripcion de la categoria de la pregunta.',
  PRIMARY KEY (`idCategoriaPregunta`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`Pregunta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`Pregunta` (
  `idPregunta` BIGINT UNSIGNED NOT NULL COMMENT 'id de la pregunta',
  `nombre` VARCHAR(100) NULL COMMENT 'nombre de la pregunta',
  `descripcion` TEXT NULL COMMENT 'descripcion de la pregunta',
  `respuestasPosibles` TEXT NULL COMMENT 'Respuestas posibles para espacios en blanco',
  `respuestasCoincidencias` TEXT NULL COMMENT 'Respuestas para listas desplegables de coincidencias',
  `respuestaExacta` DOUBLE NULL COMMENT 'Para respuesta numerica, guardar respuesta exacta',
  `rangoMinimo` DOUBLE NULL COMMENT 'Para respuesta numerica con rango, especificar rango minimo ',
  `rangoMaximo` DOUBLE NULL COMMENT 'Para respuesta numerica con rango, especificar rango maximo',
  `puntaje` FLOAT NULL COMMENT 'puntaje que tendra la pregunta',
  `respuestaFeedback` TEXT NULL COMMENT 'Comentario de retroalimentacion de respuestas correctas de la pregunta',
  `posicion` INT NULL,
  `idCategoriaPregunta` INT UNSIGNED NOT NULL,
  `idEvaluacion` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idPregunta`),
  INDEX `fk_Pregunta_CategoriaPregunta1_idx` (`idCategoriaPregunta` ASC),
  INDEX `fk_Pregunta_Evaluacion1_idx` (`idEvaluacion` ASC),
  CONSTRAINT `fk_Pregunta_CategoriaPregunta1`
    FOREIGN KEY (`idCategoriaPregunta`)
    REFERENCES `pecs_lms`.`CategoriaPregunta` (`idCategoriaPregunta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Pregunta_Evaluacion1`
    FOREIGN KEY (`idEvaluacion`)
    REFERENCES `pecs_lms`.`Evaluacion` (`idEvaluacion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`OpcionPregunta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`OpcionPregunta` (
  `idOpcionPregunta` BIGINT UNSIGNED NOT NULL,
  `descripcion` TEXT NULL COMMENT 'descripcion de las opciones de las preguntas ',
  `respuestaCorrectaCoincidencia` TEXT NULL,
  `puntajeOpcion` FLOAT NULL COMMENT 'Ponderacion de respuesta',
  `correcta` TINYINT NULL COMMENT 'Especificar si la opcion es una respuesta correcta o no',
  `posicion` INT NULL,
  `idPregunta` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idOpcionPregunta`),
  INDEX `fk_OpcionPregunta_Pregunta1_idx` (`idPregunta` ASC),
  CONSTRAINT `fk_OpcionPregunta_Pregunta1`
    FOREIGN KEY (`idPregunta`)
    REFERENCES `pecs_lms`.`Pregunta` (`idPregunta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`Anuncio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`Anuncio` (
  `idAnuncio` BIGINT UNSIGNED NOT NULL COMMENT 'id del anuncio',
  `nombre` VARCHAR(100) NOT NULL COMMENT 'nombre del anuncio',
  `contenido` LONGTEXT NULL,
  `fechaPublicacion` DATETIME NULL COMMENT 'fecha que se publico el anuncio',
  `posicionSeccionAnuncios` INT NULL,
  `idInscripcionDocente` BIGINT UNSIGNED NOT NULL COMMENT 'Docente que publica el anuncio',
  `idSeccionPrograma` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idAnuncio`),
  INDEX `fk_Anuncio_SeccionPrograma1_idx` (`idSeccionPrograma` ASC),
  INDEX `fk_Anuncio_Inscripcion1_idx` (`idInscripcionDocente` ASC),
  CONSTRAINT `fk_Anuncio_SeccionPrograma1`
    FOREIGN KEY (`idSeccionPrograma`)
    REFERENCES `pecs_lms`.`SeccionPrograma` (`idSeccionPrograma`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Anuncio_Inscripcion1`
    FOREIGN KEY (`idInscripcionDocente`)
    REFERENCES `pecs_lms`.`Inscripcion` (`idInscripcion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`ArchivoAdjunto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`ArchivoAdjunto` (
  `idArchivoAdjunto` BIGINT UNSIGNED NOT NULL,
  `nombreArchivo` VARCHAR(255) NULL,
  `urlArchivo` VARCHAR(3000) NULL,
  `tamanio` VARCHAR(45) NULL,
  `idAnuncio` BIGINT UNSIGNED NULL,
  `idTarea` BIGINT UNSIGNED NULL,
  `idForo` BIGINT UNSIGNED NULL,
  PRIMARY KEY (`idArchivoAdjunto`),
  INDEX `fk_ArchivoAnuncio_Anuncio1_idx` (`idAnuncio` ASC),
  INDEX `fk_ArchivoAdjunto_Foro1_idx` (`idForo` ASC),
  INDEX `fk_ArchivoAdjunto_Tarea1_idx` (`idTarea` ASC),
  CONSTRAINT `fk_ArchivoAnuncio_Anuncio1`
    FOREIGN KEY (`idAnuncio`)
    REFERENCES `pecs_lms`.`Anuncio` (`idAnuncio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ArchivoAdjunto_Foro1`
    FOREIGN KEY (`idForo`)
    REFERENCES `pecs_lms`.`Foro` (`idForo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ArchivoAdjunto_Tarea1`
    FOREIGN KEY (`idTarea`)
    REFERENCES `pecs_lms`.`Tarea` (`idTarea`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`EntradaAnuncio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`EntradaAnuncio` (
  `idEntradaAnuncio` BIGINT UNSIGNED NOT NULL,
  `comentario` TEXT NOT NULL COMMENT 'comentario del anuncio',
  `fechaPublicacion` DATETIME NULL COMMENT 'fecha que se publico el anuncio',
  `fechaUltimaModificacion` DATETIME NULL COMMENT 'ultima fecha que se publico el anuncio',
  `idInscripcion` BIGINT UNSIGNED NOT NULL COMMENT 'Participante que publica el comentario',
  `idAnuncio` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idEntradaAnuncio`),
  INDEX `fk_EntradaAnuncio_Inscripcion1_idx` (`idInscripcion` ASC),
  INDEX `fk_EntradaAnuncio_Anuncio1_idx` (`idAnuncio` ASC),
  CONSTRAINT `fk_EntradaAnuncio_Inscripcion1`
    FOREIGN KEY (`idInscripcion`)
    REFERENCES `pecs_lms`.`Inscripcion` (`idInscripcion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_EntradaAnuncio_Anuncio1`
    FOREIGN KEY (`idAnuncio`)
    REFERENCES `pecs_lms`.`Anuncio` (`idAnuncio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`RespuestaEntradaAnuncio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`RespuestaEntradaAnuncio` (
  `idRespuestaEntradaAnuncio` INT UNSIGNED NOT NULL,
  `comentario` TEXT NOT NULL COMMENT 'comentario del anuncio',
  `fechaPublicacion` DATETIME NULL COMMENT 'fecha que se publico el anuncio',
  `fechaUltimaModificacion` DATETIME NULL COMMENT 'ultima modificacion del anuncio',
  `idInscripcion` BIGINT UNSIGNED NOT NULL,
  `idEntradaAnuncio` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idRespuestaEntradaAnuncio`),
  INDEX `fk_RespuestaEntradaAnuncio_Inscripcion1_idx` (`idInscripcion` ASC),
  INDEX `fk_RespuestaEntradaAnuncio_EntradaAnuncio1_idx` (`idEntradaAnuncio` ASC),
  CONSTRAINT `fk_RespuestaEntradaAnuncio_Inscripcion1`
    FOREIGN KEY (`idInscripcion`)
    REFERENCES `pecs_lms`.`Inscripcion` (`idInscripcion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_RespuestaEntradaAnuncio_EntradaAnuncio1`
    FOREIGN KEY (`idEntradaAnuncio`)
    REFERENCES `pecs_lms`.`EntradaAnuncio` (`idEntradaAnuncio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`FormatoDiploma`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`FormatoDiploma` (
  `idFormatoDiploma` BIGINT UNSIGNED NOT NULL,
  `urlDisenioDiploma` VARCHAR(3000) NULL,
  `notaRequisito` FLOAT NULL COMMENT 'Nota minima para tener disponibilidad al diploma',
  `idSeccionPrograma` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`idFormatoDiploma`),
  INDEX `fk_FormatoDiploma_SeccionPrograma1_idx` (`idSeccionPrograma` ASC),
  CONSTRAINT `fk_FormatoDiploma_SeccionPrograma1`
    FOREIGN KEY (`idSeccionPrograma`)
    REFERENCES `pecs_lms`.`SeccionPrograma` (`idSeccionPrograma`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`CalificacionAsignacion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`CalificacionAsignacion` (
  `idCalificacionAsignacion` BIGINT UNSIGNED NOT NULL,
  `idTarea` BIGINT UNSIGNED NULL,
  `idForo` BIGINT UNSIGNED NULL,
  `idInscripcionEstudiante` BIGINT UNSIGNED NULL,
  `idInscripcionDocente` BIGINT UNSIGNED NULL,
  `nota` FLOAT NULL COMMENT 'nota obtenida',
  `fechaCalificacion` DATETIME NULL COMMENT 'fecha en la cual se realizo la calificacion',
  `estadoCalificacion` VARCHAR(45) NULL COMMENT 'calificada/no calificada',
  `comentario` VARCHAR(5000) NULL COMMENT 'comentario sobre la calificacion ',
  PRIMARY KEY (`idCalificacionAsignacion`),
  INDEX `fk_CalificacionAsignacion_Tarea1_idx` (`idTarea` ASC),
  INDEX `fk_CalificacionAsignacion_Inscripcion1_idx` (`idInscripcionEstudiante` ASC),
  INDEX `fk_CalificacionAsignacion_Inscripcion2_idx` (`idInscripcionDocente` ASC),
  INDEX `fk_CalificacionAsignacion_Foro1_idx` (`idForo` ASC),
  CONSTRAINT `fk_CalificacionAsignacion_Tarea1`
    FOREIGN KEY (`idTarea`)
    REFERENCES `pecs_lms`.`Tarea` (`idTarea`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CalificacionAsignacion_Inscripcion1`
    FOREIGN KEY (`idInscripcionEstudiante`)
    REFERENCES `pecs_lms`.`Inscripcion` (`idInscripcion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CalificacionAsignacion_Inscripcion2`
    FOREIGN KEY (`idInscripcionDocente`)
    REFERENCES `pecs_lms`.`Inscripcion` (`idInscripcion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CalificacionAsignacion_Foro1`
    FOREIGN KEY (`idForo`)
    REFERENCES `pecs_lms`.`Foro` (`idForo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`IntentoEvaluacion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`IntentoEvaluacion` (
  `idIntentoEvaluacion` BIGINT UNSIGNED NOT NULL,
  `idInscripcionEstudiante` BIGINT UNSIGNED NOT NULL,
  `idEvaluacion` BIGINT UNSIGNED NOT NULL,
  `nota` FLOAT NULL COMMENT 'nota en el intento de evaluacion',
  `fechaIntento` DATETIME NULL COMMENT 'Fecha y hora en la que termino el intento',
  `duracionIntento` INT NULL COMMENT 'tiempo que duro el intento',
  `estadoEvaluacion` VARCHAR(45) NULL,
  `comentario` VARCHAR(5000) NULL COMMENT 'comentario del intento de evaluacion.',
  PRIMARY KEY (`idIntentoEvaluacion`),
  INDEX `fk_IntentoEvaluacion_Evaluacion1_idx` (`idEvaluacion` ASC),
  INDEX `fk_IntentoEvaluacion_Inscripcion1_idx` (`idInscripcionEstudiante` ASC),
  CONSTRAINT `fk_IntentoEvaluacion_Evaluacion1`
    FOREIGN KEY (`idEvaluacion`)
    REFERENCES `pecs_lms`.`Evaluacion` (`idEvaluacion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_IntentoEvaluacion_Inscripcion1`
    FOREIGN KEY (`idInscripcionEstudiante`)
    REFERENCES `pecs_lms`.`Inscripcion` (`idInscripcion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`PreguntasGuardadas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`PreguntasGuardadas` (
  `idIntentoEvaluacion` BIGINT UNSIGNED NOT NULL,
  `idPregunta` BIGINT UNSIGNED NOT NULL COMMENT 'id de la pregunta',
  `idOpcionPregunta` BIGINT UNSIGNED NOT NULL COMMENT 'id de la opcion de la pregunta ',
  `respuestaCoincidencia` TEXT NULL,
  INDEX `fk_IntentoEvaluacion_has_Pregunta_Pregunta1_idx` (`idPregunta` ASC),
  INDEX `fk_IntentoEvaluacion_has_Pregunta_IntentoEvaluacion1_idx` (`idIntentoEvaluacion` ASC),
  PRIMARY KEY (`idIntentoEvaluacion`, `idPregunta`),
  INDEX `fk_PreguntasGuardadas_OpcionPregunta1_idx` (`idOpcionPregunta` ASC),
  CONSTRAINT `fk_IntentoEvaluacion_has_Pregunta_IntentoEvaluacion1`
    FOREIGN KEY (`idIntentoEvaluacion`)
    REFERENCES `pecs_lms`.`IntentoEvaluacion` (`idIntentoEvaluacion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_IntentoEvaluacion_has_Pregunta_Pregunta1`
    FOREIGN KEY (`idPregunta`)
    REFERENCES `pecs_lms`.`Pregunta` (`idPregunta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PreguntasGuardadas_OpcionPregunta1`
    FOREIGN KEY (`idOpcionPregunta`)
    REFERENCES `pecs_lms`.`OpcionPregunta` (`idOpcionPregunta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pecs_lms`.`PreguntasDesarrolloGuardadas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pecs_lms`.`PreguntasDesarrolloGuardadas` (
  `idIntentoEvaluacion` BIGINT UNSIGNED NOT NULL COMMENT 'id del intento',
  `idPregunta` BIGINT UNSIGNED NOT NULL COMMENT 'id de la pregunta',
  `entradaTexto` TEXT NULL COMMENT 'texto de la pregunta',
  `puntajeObtenido` INT NULL COMMENT 'puntaje obtenido en la pregunta',
  PRIMARY KEY (`idIntentoEvaluacion`, `idPregunta`),
  INDEX `fk_IntentoEvaluacion_has_Pregunta_Pregunta2_idx` (`idPregunta` ASC),
  INDEX `fk_IntentoEvaluacion_has_Pregunta_IntentoEvaluacion2_idx` (`idIntentoEvaluacion` ASC),
  CONSTRAINT `fk_IntentoEvaluacion_has_Pregunta_IntentoEvaluacion2`
    FOREIGN KEY (`idIntentoEvaluacion`)
    REFERENCES `pecs_lms`.`IntentoEvaluacion` (`idIntentoEvaluacion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_IntentoEvaluacion_has_Pregunta_Pregunta2`
    FOREIGN KEY (`idPregunta`)
    REFERENCES `pecs_lms`.`Pregunta` (`idPregunta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;
